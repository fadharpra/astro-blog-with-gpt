---
interface Heading {
  depth: number;
  slug: string;
  text: string;
}
const { headings = [] } = Astro.props as { headings: Heading[] };

const filtered = headings.filter(h => h.depth === 2 || h.depth === 3);

const grouped: { depth: number; slug: string; text: string; children: Heading[] }[] = [];
for (const h of filtered) {
  if (h.depth === 2) {
    grouped.push({ ...h, children: [] });
  } else if (h.depth === 3 && grouped.length > 0) {
    grouped[grouped.length - 1].children.push(h);
  }
}
---
{grouped.length > 0 && (
  <aside class="hidden lg:block w-60 shrink-0 text-xs leading-4"> 
    <nav
      id="toc"
      aria-label="Table of contents"
      class="bg-white border border-gray-200 p-3 rounded-xl shadow-sm max-h-[80vh] overflow-auto" 
    >
      <ul class="space-y-1"> 
        {grouped.map(section => (
          <li>
            <a
              href={`#${section.slug}`}
              class="block py-0.5 border-l-2 border-transparent pl-2 font-medium hover:underline rounded text-gray-800" 
            >
              {section.text}
            </a>
            {section.children.length > 0 && (
              <ul class="mt-0.5 pl-4 space-y-0.5 text-gray-600">
                {section.children.map(sub => (
                  <li>
                    <a
                      href={`#${sub.slug}`}
                      class="block py-0.5 border-l-2 border-transparent pl-2 hover:underline rounded"
                    >
                      {sub.text}
                    </a>
                  </li>
                ))}
              </ul>
            )}
          </li>
        ))}
      </ul>
    </nav>
    <script is:inline>
      document.addEventListener('DOMContentLoaded', () => {
        const toc = document.getElementById('toc');
        if (!toc) return;

        // Dapatkan semua link ToC dan heading terkait
        const links = Array.from(toc.querySelectorAll('a'));
        const headings = links
          .map(link => {
            const slug = link.getAttribute('href').slice(1);
            return document.getElementById(slug);
          })
          .filter(Boolean);

        if (headings.length === 0) return;

        // Hitung tinggi header fixed (jika ada)
        const header = document.querySelector('header');
        const headerHeight = header ? header.offsetHeight + 20 : 0; // +20 untuk padding

        // Fungsi untuk set active link
        function setActive(id) {
          links.forEach(link => 
            link.classList.remove('border-blue-600', 'font-semibold', 'bg-blue-50')
          );
          const activeLink = toc.querySelector(`a[href="#${id}"]`);
          if (activeLink) activeLink.classList.add('border-blue-600', 'font-semibold', 'bg-blue-50');
        }

        // Pendekatan alternatif: Scroll-based detection
        let lastActive = headings[0].id;
        function updateActiveHeading() {
          let currentActive = null;
          
          // Cari heading yang paling dekat dengan atas viewport (dengan offset header)
          for (const heading of headings) {
            const rect = heading.getBoundingClientRect();
            if (rect.top <= headerHeight + 50) {
              currentActive = heading;
            } else {
              break; // Keluar loop setelah melewati heading teratas
            }
          }

          // Update active link jika berubah
          if (currentActive && currentActive.id !== lastActive) {
            setActive(currentActive.id);
            lastActive = currentActive.id;
          }
        }

        function updateActiveHeading() {
  let closestHeading = null;
  let closestDistance = Infinity;

  // Cari heading dengan posisi terdekat ke atas viewport (dengan offset header)
  headings.forEach(heading => {
    const rect = heading.getBoundingClientRect();
    const distance = Math.abs(rect.top - headerHeight);

    console.log(
      `Heading: ${heading.id} | Jarak: ${distance.toFixed(1)}px`
    );

    if (distance < closestDistance) {
      closestDistance = distance;
      closestHeading = heading;
    }
  });

  // Update active link jika berubah
  if (closestHeading && closestHeading.id !== lastActive) {
    console.log(`ðŸ”µ Heading terdekat: ${closestHeading.id}`);
    setActive(closestHeading.id);
    lastActive = closestHeading.id;
  }
}
        // Jalankan pertama kali
        updateActiveHeading();

        // Tambahkan event listener untuk scroll
        window.addEventListener('scroll', updateActiveHeading);
        window.addEventListener('resize', updateActiveHeading); // Handle resize

        // Optional: Hapus event listener saat komponen unmount (untuk SPA)
        document.addEventListener('astro:before-swap', () => {
          window.removeEventListener('scroll', updateActiveHeading);
          window.removeEventListener('resize', updateActiveHeading);
        });
      });
    </script>
  </aside>
)}