---
interface Heading {
  depth: number;
  slug: string;
  text: string;
}
const { headings = [] } = Astro.props as { headings: Heading[] };

const filtered = headings.filter(h => h.depth === 2 || h.depth === 3);

const grouped: { depth: number; slug: string; text: string; children: Heading[] }[] = [];
for (const h of filtered) {
  if (h.depth === 2) {
    grouped.push({ ...h, children: [] });
  } else if (h.depth === 3 && grouped.length > 0) {
    grouped[grouped.length - 1].children.push(h);
  }
}
---
{grouped.length > 0 && (
  <aside class="hidden lg:block w-60 shrink-0 text-xs leading-4"> 
    <nav
      id="toc"
      aria-label="Table of contents"
      class="bg-white border border-gray-200 p-3 rounded-xl shadow-sm max-h-[80vh] overflow-auto" 
    >
      <ul class="space-y-1"> 
        {grouped.map(section => (
          <li>
            <a
              href={`#${section.slug}`}
              class="block py-0.5 border-l-2 border-transparent pl-2 font-medium hover:underline rounded text-gray-800" 
            >
              {section.text}
            </a>
            {section.children.length > 0 && (
              <ul class="mt-0.5 pl-4 space-y-0.5 text-gray-600">
                {section.children.map(sub => (
                  <li>
                    <a
                      href={`#${sub.slug}`}
                      class="block py-0.5 border-l-2 border-transparent pl-2 hover:underline rounded"
                    >
                      {sub.text}
                    </a>
                  </li>
                ))}
              </ul>
            )}
          </li>
        ))}
      </ul>
    </nav>
<script is:inline>
  document.addEventListener('DOMContentLoaded', () => {
    const toc = document.getElementById('toc');
    if (!toc) return;

    // Get all ToC links and corresponding headings
    const links = Array.from(toc.querySelectorAll('a'));
    const headings = links
      .map(link => {
        const slug = link.getAttribute('href').slice(1);
        return document.getElementById(slug);
      })
      .filter(Boolean);

    if (headings.length === 0) return;

    // Track last active heading
    let lastActive = null;

    // Calculate header height (with responsive update)
    function getHeaderHeight() {
      const header = document.querySelector('header');
      return header ? header.offsetHeight + 20 : 0; // +20 for padding
    }

    // Set active link
    function setActive(id) {
      links.forEach(link => {
        link.classList.remove(
          'border-blue-600',
          'font-semibold',
          'bg-blue-50'
        );
      });
      const activeLink = toc.querySelector(`a[href="#${id}"]`);
      if (activeLink) {
        activeLink.classList.add(
          'border-blue-600',
          'font-semibold',
          'bg-blue-50'
        );
      }
    }

    // Improved active heading detection
    function updateActiveHeading() {
      const headerHeight = getHeaderHeight();
      let currentActive = null;
      let minDistance = Infinity;

      // Find closest heading above viewport center
      headings.forEach(heading => {
        const rect = heading.getBoundingClientRect();
        const distance = rect.top - headerHeight;
        
        // Prefer headings above center line
        if (distance < 0) {
          const absDistance = Math.abs(distance);
          if (absDistance < minDistance) {
            minDistance = absDistance;
            currentActive = heading;
          }
        }
      });

      // If no heading above center, get first visible
      if (!currentActive) {
        for (const heading of headings) {
          const rect = heading.getBoundingClientRect();
          if (rect.top >= headerHeight) {
            currentActive = heading;
            break;
          }
        }
      }

      // Fallback to last heading
      if (!currentActive && headings.length > 0) {
        currentActive = headings[headings.length - 1];
      }

      // Update active link
      if (currentActive && currentActive.id !== lastActive) {
        setActive(currentActive.id);
        lastActive = currentActive.id;
      }
    }

    // Initial update
    updateActiveHeading();

    // Throttle scroll events
    let isScrolling = false;
    function handleScroll() {
      if (!isScrolling) {
        window.requestAnimationFrame(() => {
          updateActiveHeading();
          isScrolling = false;
        });
        isScrolling = true;
      }
    }

    // Add event listeners
    window.addEventListener('scroll', handleScroll);
    window.addEventListener('resize', updateActiveHeading);

    // Cleanup
    document.addEventListener('astro:before-swap', () => {
      window.removeEventListener('scroll', handleScroll);
      window.removeEventListener('resize', updateActiveHeading);
    });
  });
</script>
  </aside>
)}