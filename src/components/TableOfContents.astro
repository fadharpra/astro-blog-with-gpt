---
interface Heading {
  depth: number;
  slug: string;
  text: string;
}
const { headings = [] } = Astro.props as { headings: Heading[] };

const filtered = headings.filter(h => h.depth === 2 || h.depth === 3);

const grouped: { depth: number; slug: string; text: string; children: Heading[] }[] = [];
for (const h of filtered) {
  if (h.depth === 2) {
    grouped.push({ ...h, children: [] });
  } else if (h.depth === 3 && grouped.length > 0) {
    grouped[grouped.length - 1].children.push(h);
  }
}
---
{grouped.length > 0 && (
  <aside class="hidden lg:block w-60 shrink-0 text-xs leading-4"> 
    <nav
      id="toc"
      aria-label="Table of contents"
      class="bg-white border border-gray-200 p-3 rounded-xl shadow-sm max-h-[80vh] overflow-auto" 
    >
      <ul class="space-y-1"> 
        {grouped.map(section => (
          <li>
            <a
              href={`#${section.slug}`}
              class="block py-0.5 border-l-2 border-transparent pl-2 font-medium hover:underline rounded text-gray-800" 
            >
              {section.text}
            </a>
            {section.children.length > 0 && (
              <ul class="mt-0.5 pl-4 space-y-0.5 text-gray-600">
                {section.children.map(sub => (
                  <li>
                    <a
                      href={`#${sub.slug}`}
                      class="block py-0.5 border-l-2 border-transparent pl-2 hover:underline rounded"
                    >
                      {sub.text}
                    </a>
                  </li>
                ))}
              </ul>
            )}
          </li>
        ))}
      </ul>
    </nav>
    <script is:inline>
      document.addEventListener('DOMContentLoaded', () => {
        const toc = document.getElementById('toc');
        if (!toc) return;
        const links = Array.from(toc.querySelectorAll('a'));
        const headings = links
          .map((l) => document.getElementById(l.getAttribute('href').slice(1)))
          .filter(Boolean);

        function setActive(id) {
          links.forEach((a) =>
            a.classList.remove('border-blue-600', 'font-semibold', 'bg-blue-50')
          );
          const link = toc.querySelector(`a[href="#${id}"]`);
          if (link) link.classList.add('border-blue-600', 'font-semibold', 'bg-blue-50');
        }

        if (headings.length > 0) setActive(headings[0].id);

        const observer = new IntersectionObserver(
          (entries) => {
            const visible = entries
              .filter((e) => e.isIntersecting)
              .sort(
                (a, b) =>
                  a.target.getBoundingClientRect().top -
                  b.target.getBoundingClientRect().top
              );
            if (visible.length > 0) {
              setActive(visible[0].target.id);
            }
          },
          { rootMargin: '-50% 0px -45% 0px' }
        );

        headings.forEach((el) => observer.observe(el));
      });
    </script>
  </aside>
)}